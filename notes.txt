a= {};

a.getUdetId


if(a && a.getUserId){
  
}


7:00 am - Feed 30-40g of N and D Starter
12:00 pm - Feed 30-40g of N and D Starter
5:00 pm - Feed 30-40g of N and D Starter
9:00 pm - Feed 30-40g of N and D Starter




arr.push(...items) – adds items to the end,
arr.pop() – extracts an item from the end,
arr.shift() – extracts an item from the beginning,
arr.unshift(...items) – adds items to the beginning.

When we need to iterate over an array – we can use forEach, for or for..of.
When we need to iterate and return the data for each element – we can use map.




push(...items) – adds items to the end,
pop() – extracts an item from the end,
shift() – extracts an item from the beginning,
unshift(...items) – adds items to the beginning.
splice(pos, deleteCount, ...items) – at index pos deletes deleteCount elements and inserts items.
slice(start, end) – creates a new array, copies elements from index start till end (not inclusive) into it.
concat(...items) – returns a new array: copies all members of the current one and adds items to it. 
If any of items is an array, then its elements are taken.
To search among elements:

indexOf/lastIndexOf(item, pos) – look for item starting from position pos, return the index or -1 if not found.
includes(value) – returns true if the array has value, otherwise false.
find/filter(func) – filter elements through the function, return first/all values that make it return true.
findIndex is like find, but returns the index instead of a value.
To iterate over elements:

forEach(func) – calls func for every element, does not return anything.
To transform the array:

map(func) – creates a new array from results of calling func for every element.
sort(func) – sorts the array in-place, then returns it.
reverse() – reverses the array in-place, then returns it.
split/join – convert a string to array and back.
reduce/reduceRight(func, initial) – calculate a single value over the array by calling func for each 
element and passing an intermediate result between the calls.
Additionally:

Array.isArray(value) checks value for being an array, if so returns true, otherwise false.
Please note that methods sort, reverse and splice modify the array itself.

These methods are the most used ones, they cover 99% of use cases. But there are few others:

arr.some(fn)/arr.every(fn) check the array.

The function fn is called on each element of the array similar to map. If any/all results are true, returns true, 
otherwise false.

These methods behave sort of like || and && operators: if fn returns a truthy value, 
arr.some() immediately returns true and stops iterating over the rest of items; if fn returns a falsy value, 
arr.every() immediately returns false and stops iterating over the rest of items as well


(1) Array methods
(2) Object methods 
(3) Function
(4) Map() 
(5) Iterations
(6) Destructuring
(7) Recursion
(8) Advanced working with the Functions
(9) Prototype
(10) DOM manipulation
    

json stands for javascript object notation :(Handling an unstructured data)
    
1)As traditional way of storing data is done by sql 

Part-1
why json?:Data will be in table format as we need to change the data type to string so we need a tool called json.
As it can be easily readable either by human as well as by a machine and the datas are Compatible

parent
child add, remove
append
create element

